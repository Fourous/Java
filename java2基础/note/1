java sdk包含的基本组件包括
.javac  编译器，将源代码编译成字节码文件
.jar 打包文件讲相关的类文件打包成一个文件
.javadoc 文档生成器，讲代码注释中提取文件
.jdb   调试器，调试工具

classLoader Ｊａｖ程序不是一个可执行文件，由不同的类文件组成，每个文件对应一个Ｊａｖａ类，ｃｌａｓｓｌｏａｄｅｒ是ｊｖｍ的实现一部分，运行时转载核心ＡＰＩ，其中既包括用户定义的ｃｌａｓｓｌｏａｄｅｒ

１：ｅｘｔｃｌａｓｓＬｏａｄｅｒ　　作用是架子啊java扩展api，也就是/lib/ext的类
２：appclassloader　　加载用户机器上classpath设置目录的class，通常没有制定classlaoder，陈许愿自定会的类classlaoder进行加载


加载流程
jvm　启动，运行bootstrap　classloader　该classloader加载java核心api(extclasslaoder和appclassloader此时被加载),然后调用extclassloader加载扩展api，最后appclassloadwer加载classpath目录下定义的class

注意：classloader 具备层次关系，不同的类加载器分别创建同一个类的字节码数据属于完全不同的对象，没有任何关联

字符转换问题：
jvm设计不允许各种编码方式的字符并存，在java中字符只能以一种形式存在，就是unicode(不选择任何编码),Jvm这种约定使得字符分为两部分，jvm os，所有的编码转换在边界进行，边界处也就是Reader writer起作用的地方
所有i/o分为面向字节和面向字符,面向字节方式保证系统和jvm 中的二进制文件一致，一般适合读音频视频等不需要转换的文件

面向字符，也就是reader writer类，实际隐式做编码转换,但是这个转换是傻瓜式的ＧＢＫ编码，无法跨平台，如果其他编码(比如utf-8),这个时候得用Input/outputstrameReader/writer,式字节流和字符流之间的适配器，承担编码转换任务．

字符类型转换问题：
java数据类型分为布尔型，字符型，数值型
布尔型：boolean
字符型：byte,short,int,long
浮点型:float,double
常用的还有类变量：String,Date
类型转换三种：
简单数据类型之间的转换，字符串和其他类型的转换，其他使用数据类型的转换
１：整型，实型，字符型都被视为简单数据类型，低到高(byte,short,char)-int-long-float-double
分为低级到高级的自动类型转换，高级到低级的强制类型转换，包装类过度类型转换
//自动类型转换
byte b;int i=b;long j=b,float k=b;double m=b;//这些可以直接编译通过
//注意如果char类型想整形转换，会直接转换对应的ａｓｃｉｉ
//对于byte,short,char,这是同等级别，不能自动转换，需要强制类型转换
short i=99;char c=(char)i;
//强制类型转换
//高级变量抓换为低级变量时候，会导致溢出或者进度下降


//包装类可以直接将简单类型的变量表示为一个类
//6个包装类，Boolean,Character,Integer,Long,Float,Double
而String Date本身就是类，不存在包装类的概念
进行简单数据类型转换时候，利用包装类进行过度，申明变量，然后生成一个对应的包装类，利用包装类的各种方法进行类型转换


//float------double
float f1=100.00f//这里注意，系统默认浮点类型是double,加上f
Float F1=new float(f1);
Double d1=F1.doubleValue();


//字符串与其他数据类型转换，java.lang.Object类派生的所有类提供了toString()方法
int i=100;
Integer I1=new Integer(i);
String sf=I1.toString();

//将字符类型直接作为数值转换为其他数据类型
将字符类型装换为数值型变量两种对应关系
1:将其转换为ａｓｃｉｉ值
2:'1'将转换为整数１,而不是ascii码
使用Character的getNumericValue(char ch)
